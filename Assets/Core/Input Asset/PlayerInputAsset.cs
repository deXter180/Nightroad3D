//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Core/Input Asset/PlayerInputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAsset"",
    ""maps"": [
        {
            ""name"": ""BasicControls"",
            ""id"": ""3d4f08fe-2e83-4212-9f00-5a96256cf97e"",
            ""actions"": [
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""c3b8797c-5130-4b6f-b5cc-af15dd922121"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""cf2c8e6b-ac78-4581-ab2c-748872ae4a4b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""228923fa-66a9-4bf3-892f-f0b42a94db6a"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""1e812825-1dba-4539-9109-20e87bf4ab15"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Hold Crouch"",
                    ""type"": ""Value"",
                    ""id"": ""e84912b1-170f-4912-bec6-9d1f8040351d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Toggle Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""e0b4fa95-6a4e-4388-b42b-54180c2a457b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""3e135a6f-ffc9-4690-97f9-ba1208396bd6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""4ddc582b-5d50-4e45-b5fa-6bdab65edfb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""50b98795-3bc3-4bba-997a-ccd08b173afc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Value"",
                    ""id"": ""7f31db35-8706-4ab5-af7d-6ac0f988c190"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Cast Spell 1"",
                    ""type"": ""Button"",
                    ""id"": ""a21cb27c-1da0-4142-8ad4-2237a2655074"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cast Spell 2"",
                    ""type"": ""Button"",
                    ""id"": ""e53f17cb-1e80-4558-8988-08b6a0877452"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""49e8d53e-7451-4d3d-92ff-1fe62346f561"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3faff4f3-9a96-4bcf-95bd-aa4506af22ee"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb2daaa4-2b53-48d2-a331-72e45dd8e15e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5056d49a-8c8d-4235-9565-3bc6de111d78"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""83722f18-8fd7-4d9e-b785-1da1170f0d5b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""08e15973-9eee-46a4-906c-a5759d6ad233"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""2014b812-a966-438c-8b9f-fbb4c539acfe"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""3243cf1b-973f-458a-9e18-a99cf820864f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""543f377a-c0fd-4301-b6bd-d8bed478d202"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""527c16de-c698-4937-a5e6-8db840a4e27c"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c6fb696-9b34-43e8-9f10-8898b9c2c8c3"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cef9d993-0638-446e-b2a4-4fe1d4e3cf89"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a765fd05-87f9-41d5-9568-dadb115ab188"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff407228-86a9-405d-bc9b-7d8951eab03d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07c88052-9749-4f73-a432-4d617ee955f9"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cast Spell 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b71506d3-d6e7-4ce7-b9ea-ec5aa66b040c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cast Spell 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WeaponSelection"",
            ""id"": ""287e9df1-ed5c-445f-8937-da4e1e7b6a3f"",
            ""actions"": [
                {
                    ""name"": ""Weapon 1"",
                    ""type"": ""Button"",
                    ""id"": ""17f783d6-1818-4f4d-a107-bcadb84e3ba8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Weapon 2"",
                    ""type"": ""Button"",
                    ""id"": ""eead3582-1bef-4357-a5a0-8dbbed10222c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Weapon 3"",
                    ""type"": ""Button"",
                    ""id"": ""4259f0cb-74f5-4eee-b750-a6082f24e42c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Weapon 4"",
                    ""type"": ""Button"",
                    ""id"": ""e9eec494-1602-452c-8968-8077ac36327a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b222bc31-df9f-4efe-b05e-8ba91cf22d7e"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1bfb9b8c-3b86-449d-a5f9-9c7ffc633918"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1a3c91f-2b49-4d8f-9aab-98e9adf4c841"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f16f05d0-416c-4f68-b20e-04c95f91e8c2"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""d2e4e58a-f91b-4716-9a73-9ee5360f56e6"",
            ""actions"": [
                {
                    ""name"": ""Rotate Item"",
                    ""type"": ""Button"",
                    ""id"": ""9926fa4a-a039-456d-81ac-b19c6f81c115"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Remove Item"",
                    ""type"": ""Button"",
                    ""id"": ""0493e25d-fd4a-4e7c-94ee-e76ea83261c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""c30173f9-d050-4014-bc67-bebb4e114cb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Consume Item"",
                    ""type"": ""Button"",
                    ""id"": ""fa9812ad-7759-4791-8204-70c4b03c334f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""33b1c27e-0f9d-40db-be2e-096258bf09ad"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bdec07f8-502a-4f1d-925e-14318b6950e8"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Remove Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c35299af-86a6-4f02-8e88-a968c4f8f395"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7534c87-960b-4de7-902c-a4ab9f5ad501"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Consume Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BasicControls
        m_BasicControls = asset.FindActionMap("BasicControls", throwIfNotFound: true);
        m_BasicControls_MouseDelta = m_BasicControls.FindAction("MouseDelta", throwIfNotFound: true);
        m_BasicControls_MousePosition = m_BasicControls.FindAction("MousePosition", throwIfNotFound: true);
        m_BasicControls_Movement = m_BasicControls.FindAction("Movement", throwIfNotFound: true);
        m_BasicControls_Jump = m_BasicControls.FindAction("Jump", throwIfNotFound: true);
        m_BasicControls_HoldCrouch = m_BasicControls.FindAction("Hold Crouch", throwIfNotFound: true);
        m_BasicControls_ToggleCrouch = m_BasicControls.FindAction("Toggle Crouch", throwIfNotFound: true);
        m_BasicControls_Inventory = m_BasicControls.FindAction("Inventory", throwIfNotFound: true);
        m_BasicControls_Reload = m_BasicControls.FindAction("Reload", throwIfNotFound: true);
        m_BasicControls_Interact = m_BasicControls.FindAction("Interact", throwIfNotFound: true);
        m_BasicControls_Shoot = m_BasicControls.FindAction("Shoot", throwIfNotFound: true);
        m_BasicControls_CastSpell1 = m_BasicControls.FindAction("Cast Spell 1", throwIfNotFound: true);
        m_BasicControls_CastSpell2 = m_BasicControls.FindAction("Cast Spell 2", throwIfNotFound: true);
        // WeaponSelection
        m_WeaponSelection = asset.FindActionMap("WeaponSelection", throwIfNotFound: true);
        m_WeaponSelection_Weapon1 = m_WeaponSelection.FindAction("Weapon 1", throwIfNotFound: true);
        m_WeaponSelection_Weapon2 = m_WeaponSelection.FindAction("Weapon 2", throwIfNotFound: true);
        m_WeaponSelection_Weapon3 = m_WeaponSelection.FindAction("Weapon 3", throwIfNotFound: true);
        m_WeaponSelection_Weapon4 = m_WeaponSelection.FindAction("Weapon 4", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_RotateItem = m_UI.FindAction("Rotate Item", throwIfNotFound: true);
        m_UI_RemoveItem = m_UI.FindAction("Remove Item", throwIfNotFound: true);
        m_UI_Menu = m_UI.FindAction("Menu", throwIfNotFound: true);
        m_UI_ConsumeItem = m_UI.FindAction("Consume Item", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasicControls
    private readonly InputActionMap m_BasicControls;
    private IBasicControlsActions m_BasicControlsActionsCallbackInterface;
    private readonly InputAction m_BasicControls_MouseDelta;
    private readonly InputAction m_BasicControls_MousePosition;
    private readonly InputAction m_BasicControls_Movement;
    private readonly InputAction m_BasicControls_Jump;
    private readonly InputAction m_BasicControls_HoldCrouch;
    private readonly InputAction m_BasicControls_ToggleCrouch;
    private readonly InputAction m_BasicControls_Inventory;
    private readonly InputAction m_BasicControls_Reload;
    private readonly InputAction m_BasicControls_Interact;
    private readonly InputAction m_BasicControls_Shoot;
    private readonly InputAction m_BasicControls_CastSpell1;
    private readonly InputAction m_BasicControls_CastSpell2;
    public struct BasicControlsActions
    {
        private @PlayerInputAsset m_Wrapper;
        public BasicControlsActions(@PlayerInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseDelta => m_Wrapper.m_BasicControls_MouseDelta;
        public InputAction @MousePosition => m_Wrapper.m_BasicControls_MousePosition;
        public InputAction @Movement => m_Wrapper.m_BasicControls_Movement;
        public InputAction @Jump => m_Wrapper.m_BasicControls_Jump;
        public InputAction @HoldCrouch => m_Wrapper.m_BasicControls_HoldCrouch;
        public InputAction @ToggleCrouch => m_Wrapper.m_BasicControls_ToggleCrouch;
        public InputAction @Inventory => m_Wrapper.m_BasicControls_Inventory;
        public InputAction @Reload => m_Wrapper.m_BasicControls_Reload;
        public InputAction @Interact => m_Wrapper.m_BasicControls_Interact;
        public InputAction @Shoot => m_Wrapper.m_BasicControls_Shoot;
        public InputAction @CastSpell1 => m_Wrapper.m_BasicControls_CastSpell1;
        public InputAction @CastSpell2 => m_Wrapper.m_BasicControls_CastSpell2;
        public InputActionMap Get() { return m_Wrapper.m_BasicControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicControlsActions set) { return set.Get(); }
        public void SetCallbacks(IBasicControlsActions instance)
        {
            if (m_Wrapper.m_BasicControlsActionsCallbackInterface != null)
            {
                @MouseDelta.started -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.performed -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.canceled -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnMouseDelta;
                @MousePosition.started -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnMousePosition;
                @Movement.started -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnJump;
                @HoldCrouch.started -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnHoldCrouch;
                @HoldCrouch.performed -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnHoldCrouch;
                @HoldCrouch.canceled -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnHoldCrouch;
                @ToggleCrouch.started -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnToggleCrouch;
                @ToggleCrouch.performed -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnToggleCrouch;
                @ToggleCrouch.canceled -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnToggleCrouch;
                @Inventory.started -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnInventory;
                @Reload.started -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnReload;
                @Interact.started -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnInteract;
                @Shoot.started -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnShoot;
                @CastSpell1.started -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnCastSpell1;
                @CastSpell1.performed -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnCastSpell1;
                @CastSpell1.canceled -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnCastSpell1;
                @CastSpell2.started -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnCastSpell2;
                @CastSpell2.performed -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnCastSpell2;
                @CastSpell2.canceled -= m_Wrapper.m_BasicControlsActionsCallbackInterface.OnCastSpell2;
            }
            m_Wrapper.m_BasicControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseDelta.started += instance.OnMouseDelta;
                @MouseDelta.performed += instance.OnMouseDelta;
                @MouseDelta.canceled += instance.OnMouseDelta;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @HoldCrouch.started += instance.OnHoldCrouch;
                @HoldCrouch.performed += instance.OnHoldCrouch;
                @HoldCrouch.canceled += instance.OnHoldCrouch;
                @ToggleCrouch.started += instance.OnToggleCrouch;
                @ToggleCrouch.performed += instance.OnToggleCrouch;
                @ToggleCrouch.canceled += instance.OnToggleCrouch;
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @CastSpell1.started += instance.OnCastSpell1;
                @CastSpell1.performed += instance.OnCastSpell1;
                @CastSpell1.canceled += instance.OnCastSpell1;
                @CastSpell2.started += instance.OnCastSpell2;
                @CastSpell2.performed += instance.OnCastSpell2;
                @CastSpell2.canceled += instance.OnCastSpell2;
            }
        }
    }
    public BasicControlsActions @BasicControls => new BasicControlsActions(this);

    // WeaponSelection
    private readonly InputActionMap m_WeaponSelection;
    private IWeaponSelectionActions m_WeaponSelectionActionsCallbackInterface;
    private readonly InputAction m_WeaponSelection_Weapon1;
    private readonly InputAction m_WeaponSelection_Weapon2;
    private readonly InputAction m_WeaponSelection_Weapon3;
    private readonly InputAction m_WeaponSelection_Weapon4;
    public struct WeaponSelectionActions
    {
        private @PlayerInputAsset m_Wrapper;
        public WeaponSelectionActions(@PlayerInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Weapon1 => m_Wrapper.m_WeaponSelection_Weapon1;
        public InputAction @Weapon2 => m_Wrapper.m_WeaponSelection_Weapon2;
        public InputAction @Weapon3 => m_Wrapper.m_WeaponSelection_Weapon3;
        public InputAction @Weapon4 => m_Wrapper.m_WeaponSelection_Weapon4;
        public InputActionMap Get() { return m_Wrapper.m_WeaponSelection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponSelectionActions set) { return set.Get(); }
        public void SetCallbacks(IWeaponSelectionActions instance)
        {
            if (m_Wrapper.m_WeaponSelectionActionsCallbackInterface != null)
            {
                @Weapon1.started -= m_Wrapper.m_WeaponSelectionActionsCallbackInterface.OnWeapon1;
                @Weapon1.performed -= m_Wrapper.m_WeaponSelectionActionsCallbackInterface.OnWeapon1;
                @Weapon1.canceled -= m_Wrapper.m_WeaponSelectionActionsCallbackInterface.OnWeapon1;
                @Weapon2.started -= m_Wrapper.m_WeaponSelectionActionsCallbackInterface.OnWeapon2;
                @Weapon2.performed -= m_Wrapper.m_WeaponSelectionActionsCallbackInterface.OnWeapon2;
                @Weapon2.canceled -= m_Wrapper.m_WeaponSelectionActionsCallbackInterface.OnWeapon2;
                @Weapon3.started -= m_Wrapper.m_WeaponSelectionActionsCallbackInterface.OnWeapon3;
                @Weapon3.performed -= m_Wrapper.m_WeaponSelectionActionsCallbackInterface.OnWeapon3;
                @Weapon3.canceled -= m_Wrapper.m_WeaponSelectionActionsCallbackInterface.OnWeapon3;
                @Weapon4.started -= m_Wrapper.m_WeaponSelectionActionsCallbackInterface.OnWeapon4;
                @Weapon4.performed -= m_Wrapper.m_WeaponSelectionActionsCallbackInterface.OnWeapon4;
                @Weapon4.canceled -= m_Wrapper.m_WeaponSelectionActionsCallbackInterface.OnWeapon4;
            }
            m_Wrapper.m_WeaponSelectionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Weapon1.started += instance.OnWeapon1;
                @Weapon1.performed += instance.OnWeapon1;
                @Weapon1.canceled += instance.OnWeapon1;
                @Weapon2.started += instance.OnWeapon2;
                @Weapon2.performed += instance.OnWeapon2;
                @Weapon2.canceled += instance.OnWeapon2;
                @Weapon3.started += instance.OnWeapon3;
                @Weapon3.performed += instance.OnWeapon3;
                @Weapon3.canceled += instance.OnWeapon3;
                @Weapon4.started += instance.OnWeapon4;
                @Weapon4.performed += instance.OnWeapon4;
                @Weapon4.canceled += instance.OnWeapon4;
            }
        }
    }
    public WeaponSelectionActions @WeaponSelection => new WeaponSelectionActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_RotateItem;
    private readonly InputAction m_UI_RemoveItem;
    private readonly InputAction m_UI_Menu;
    private readonly InputAction m_UI_ConsumeItem;
    public struct UIActions
    {
        private @PlayerInputAsset m_Wrapper;
        public UIActions(@PlayerInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateItem => m_Wrapper.m_UI_RotateItem;
        public InputAction @RemoveItem => m_Wrapper.m_UI_RemoveItem;
        public InputAction @Menu => m_Wrapper.m_UI_Menu;
        public InputAction @ConsumeItem => m_Wrapper.m_UI_ConsumeItem;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @RotateItem.started -= m_Wrapper.m_UIActionsCallbackInterface.OnRotateItem;
                @RotateItem.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnRotateItem;
                @RotateItem.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnRotateItem;
                @RemoveItem.started -= m_Wrapper.m_UIActionsCallbackInterface.OnRemoveItem;
                @RemoveItem.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnRemoveItem;
                @RemoveItem.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnRemoveItem;
                @Menu.started -= m_Wrapper.m_UIActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnMenu;
                @ConsumeItem.started -= m_Wrapper.m_UIActionsCallbackInterface.OnConsumeItem;
                @ConsumeItem.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnConsumeItem;
                @ConsumeItem.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnConsumeItem;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RotateItem.started += instance.OnRotateItem;
                @RotateItem.performed += instance.OnRotateItem;
                @RotateItem.canceled += instance.OnRotateItem;
                @RemoveItem.started += instance.OnRemoveItem;
                @RemoveItem.performed += instance.OnRemoveItem;
                @RemoveItem.canceled += instance.OnRemoveItem;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
                @ConsumeItem.started += instance.OnConsumeItem;
                @ConsumeItem.performed += instance.OnConsumeItem;
                @ConsumeItem.canceled += instance.OnConsumeItem;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IBasicControlsActions
    {
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnHoldCrouch(InputAction.CallbackContext context);
        void OnToggleCrouch(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnCastSpell1(InputAction.CallbackContext context);
        void OnCastSpell2(InputAction.CallbackContext context);
    }
    public interface IWeaponSelectionActions
    {
        void OnWeapon1(InputAction.CallbackContext context);
        void OnWeapon2(InputAction.CallbackContext context);
        void OnWeapon3(InputAction.CallbackContext context);
        void OnWeapon4(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnRotateItem(InputAction.CallbackContext context);
        void OnRemoveItem(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnConsumeItem(InputAction.CallbackContext context);
    }
}
